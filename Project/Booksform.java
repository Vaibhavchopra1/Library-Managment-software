/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package My_Forms;



import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author VAIBHAV
 */
public class Booksform extends javax.swing.JFrame {

    /**
     * Creates new form Booksform
     */
    public ConnectDb dbconnect = new ConnectDb();
    
    public Booksform() {
        initComponents();
        this.setLocationRelativeTo(null);
        try {
            Statement st = dbconnect.librarycon.createStatement();
            String firstSql = "Select * from book order by id";
            ResultSet rs = st.executeQuery(firstSql);
	while (rs.next()) {
		String id = String.valueOf(rs.getInt("id"));
                String name = rs.getString("name");
                String genre = rs.getString("genre");
                String publisher = rs.getString("publisher");
                String author = rs.getString("author");
                String level  = String.valueOf(rs.getInt("level"));
                String tbData[] = {id,name,genre,publisher,author,level};
                DefaultTableModel tblmodle = (DefaultTableModel)Book_outputtable.getModel();
                
                tblmodle.addRow(tbData);
		}
		rs.close();
		} catch (Exception e) {
		}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Book_jpanel_0 = new javax.swing.JPanel();
        goback = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        Book_jpanel_1 = new javax.swing.JPanel();
        Book_id_fieldname = new javax.swing.JLabel();
        Book_id_fieldtext = new javax.swing.JTextField();
        Book_name_fieldname = new javax.swing.JLabel();
        Book_name_fieldtext = new javax.swing.JTextField();
        Book_level_fieldname = new javax.swing.JLabel();
        Book_level_fieldtext = new javax.swing.JTextField();
        Book_add = new javax.swing.JButton();
        Book_genre_fieldname = new javax.swing.JLabel();
        Book_genre_fieldtext = new javax.swing.JTextField();
        Book_publisher_fieldname = new javax.swing.JLabel();
        Book_publisher_fieldtext = new javax.swing.JTextField();
        Book_author_fieldname = new javax.swing.JLabel();
        Book_author_fieldtext = new javax.swing.JTextField();
        Book_update = new javax.swing.JButton();
        Book_remove = new javax.swing.JButton();
        Book_jpanel_2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Book_outputtable = new javax.swing.JTable();
        Refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Book_jpanel_0.setBackground(java.awt.Color.white);

        goback.setBackground(java.awt.Color.black);
        goback.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        goback.setForeground(java.awt.Color.white);
        goback.setText("Go Back");
        goback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gobackActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        title.setText("         Books ");

        Book_jpanel_1.setBackground(java.awt.Color.white);
        Book_jpanel_1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Book_id_fieldname.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        Book_id_fieldname.setText("Book ID");

        Book_name_fieldname.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        Book_name_fieldname.setText("Book title ");

        Book_level_fieldname.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        Book_level_fieldname.setText("Book level");

        Book_add.setBackground(java.awt.Color.black);
        Book_add.setForeground(java.awt.Color.white);
        Book_add.setText("Add");
        Book_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Book_addActionPerformed(evt);
            }
        });

        Book_genre_fieldname.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        Book_genre_fieldname.setText("Book Genre");

        Book_publisher_fieldname.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        Book_publisher_fieldname.setText("Book Publisher");

        Book_author_fieldname.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        Book_author_fieldname.setText("Book Author");

        Book_update.setBackground(java.awt.Color.black);
        Book_update.setForeground(java.awt.Color.white);
        Book_update.setText("Update");
        Book_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Book_updateActionPerformed(evt);
            }
        });

        Book_remove.setBackground(java.awt.Color.black);
        Book_remove.setForeground(java.awt.Color.white);
        Book_remove.setText("Remove");
        Book_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Book_removeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Book_jpanel_1Layout = new javax.swing.GroupLayout(Book_jpanel_1);
        Book_jpanel_1.setLayout(Book_jpanel_1Layout);
        Book_jpanel_1Layout.setHorizontalGroup(
            Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Book_jpanel_1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Book_id_fieldname)
                    .addComponent(Book_name_fieldname)
                    .addComponent(Book_level_fieldname)
                    .addComponent(Book_id_fieldtext, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                    .addComponent(Book_name_fieldtext)
                    .addComponent(Book_level_fieldtext))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Book_author_fieldtext)
                    .addGroup(Book_jpanel_1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Book_publisher_fieldname)
                            .addComponent(Book_genre_fieldname)
                            .addComponent(Book_genre_fieldtext, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Book_author_fieldname)
                    .addComponent(Book_publisher_fieldtext))
                .addGap(71, 71, 71))
            .addGroup(Book_jpanel_1Layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(Book_add, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addComponent(Book_update, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(Book_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Book_jpanel_1Layout.setVerticalGroup(
            Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Book_jpanel_1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Book_id_fieldname)
                    .addComponent(Book_genre_fieldname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Book_id_fieldtext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Book_genre_fieldtext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Book_name_fieldname)
                    .addComponent(Book_publisher_fieldname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Book_name_fieldtext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Book_publisher_fieldtext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Book_level_fieldname)
                    .addComponent(Book_author_fieldname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Book_level_fieldtext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Book_author_fieldtext, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(Book_jpanel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Book_update)
                    .addComponent(Book_add)
                    .addComponent(Book_remove))
                .addContainerGap())
        );

        Book_jpanel_2.setBackground(java.awt.Color.white);
        Book_jpanel_2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Book_outputtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Genre", "Publisher", "Author", "Level"
            }
        ));
        Book_outputtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Book_outputtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Book_outputtable);

        Refresh.setBackground(java.awt.Color.black);
        Refresh.setForeground(java.awt.Color.white);
        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Book_jpanel_2Layout = new javax.swing.GroupLayout(Book_jpanel_2);
        Book_jpanel_2.setLayout(Book_jpanel_2Layout);
        Book_jpanel_2Layout.setHorizontalGroup(
            Book_jpanel_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Book_jpanel_2Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(Book_jpanel_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        Book_jpanel_2Layout.setVerticalGroup(
            Book_jpanel_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Book_jpanel_2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Refresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout Book_jpanel_0Layout = new javax.swing.GroupLayout(Book_jpanel_0);
        Book_jpanel_0.setLayout(Book_jpanel_0Layout);
        Book_jpanel_0Layout.setHorizontalGroup(
            Book_jpanel_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Book_jpanel_0Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(Book_jpanel_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Book_jpanel_0Layout.createSequentialGroup()
                        .addGroup(Book_jpanel_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Book_jpanel_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Book_jpanel_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(75, 75, 75))
                    .addGroup(Book_jpanel_0Layout.createSequentialGroup()
                        .addComponent(goback, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(191, 191, 191)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        Book_jpanel_0Layout.setVerticalGroup(
            Book_jpanel_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Book_jpanel_0Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Book_jpanel_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goback, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Book_jpanel_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Book_jpanel_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Book_jpanel_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Book_jpanel_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gobackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gobackActionPerformed
        // TODO add your handling code here:
        Dashboardform Dashform = new Dashboardform();
            Dashform.setVisible(true);
            this.setVisible(false);
    }//GEN-LAST:event_gobackActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = (DefaultTableModel) Book_outputtable.getModel();
            model.setRowCount(0);
            Statement st = dbconnect.librarycon.createStatement();
            String firstSql = "Select * from book order by id";
            ResultSet rs = st.executeQuery(firstSql);
	while (rs.next()) {
		String id = String.valueOf(rs.getInt("id"));
                String name = rs.getString("name");
                String genre = rs.getString("genre");
                String publisher = rs.getString("publisher");
                String author = rs.getString("author");
                String level  = String.valueOf(rs.getInt("level"));
                String tbData[] = {id,name,genre,publisher,author,level};
                DefaultTableModel tblmodle = (DefaultTableModel)Book_outputtable.getModel();
                
                tblmodle.addRow(tbData);
		}
		rs.close();
		} catch (Exception e) {
		}
    }//GEN-LAST:event_RefreshActionPerformed

    private void Book_outputtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Book_outputtableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tb = (DefaultTableModel)Book_outputtable.getModel();
        
        String tbid = tb.getValueAt(Book_outputtable.getSelectedRow(), 0).toString();
        String tbname = tb.getValueAt(Book_outputtable.getSelectedRow(), 1).toString();
        String tbgenre = tb.getValueAt(Book_outputtable.getSelectedRow(), 2).toString();
        String tbpublisher = tb.getValueAt(Book_outputtable.getSelectedRow(), 3).toString();
        String tbauthor = tb.getValueAt(Book_outputtable.getSelectedRow(), 4).toString();
        String tblevel = tb.getValueAt(Book_outputtable.getSelectedRow(), 5).toString();
        
        Book_id_fieldtext.setText(tbid);
        Book_name_fieldtext.setText(tbname);
        Book_genre_fieldtext.setText(tbgenre);
        Book_publisher_fieldtext.setText(tbpublisher);
        Book_author_fieldtext.setText(tbauthor);
        Book_level_fieldtext.setText(tblevel);
    }//GEN-LAST:event_Book_outputtableMouseClicked

    private void Book_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Book_removeActionPerformed
        // TODO add your handling code here:
        if ( Book_id_fieldtext.getText().isEmpty() || Book_name_fieldtext.getText().isEmpty() || Book_level_fieldtext.getText().isEmpty()|| Book_genre_fieldtext.getText().isEmpty() || Book_publisher_fieldtext.getText().isEmpty()|| Book_author_fieldtext.getText().isEmpty() ){
            JOptionPane.showMessageDialog(new JFrame(), "Choose a value from the table to be deleted.", "Message" , JOptionPane.INFORMATION_MESSAGE);
        }else{
            int result = JOptionPane.showConfirmDialog(Book_jpanel_0,"Are you Sure? You want to Delete?", "Books form",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
            if(result == JOptionPane.YES_OPTION){
                try{
                    String sql = "Delete from book where id =?";
                    PreparedStatement ps = dbconnect.librarycon.prepareStatement(sql);
                    ps.setInt(1, Integer.parseInt(Book_id_fieldtext.getText()));
                    ps.execute();
                    JOptionPane.showMessageDialog(null, "Deleted successfully!! Click refresh to see changes");
                    Book_id_fieldtext.setText("");
                    Book_name_fieldtext.setText("");
                    Book_level_fieldtext.setText("");
                    Book_genre_fieldtext.setText("");
                    Book_publisher_fieldtext.setText("");
                    Book_author_fieldtext.setText("");
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, e);
                }
            }

        }
    }//GEN-LAST:event_Book_removeActionPerformed

    private void Book_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Book_updateActionPerformed
        // TODO add your handling code here:
        if ( Book_id_fieldtext.getText().isEmpty() || Book_name_fieldtext.getText().isEmpty() || Book_level_fieldtext.getText().isEmpty()|| Book_genre_fieldtext.getText().isEmpty() || Book_publisher_fieldtext.getText().isEmpty()|| Book_author_fieldtext.getText().isEmpty() ){
            JOptionPane.showMessageDialog(new JFrame(), "Choose a value from the table to be updated.", "Message" , JOptionPane.INFORMATION_MESSAGE);
        }else{
            try{
                String sql = "Update book set name = ?,genre = ?, publisher = ?, author = ?, level = ?  where id =?";
                PreparedStatement ps = dbconnect.librarycon.prepareStatement(sql);
                ps.setString(1, Book_name_fieldtext.getText());
                ps.setString(2, Book_genre_fieldtext.getText());
                ps.setString(3, Book_publisher_fieldtext.getText());
                ps.setString(4, Book_author_fieldtext.getText());
                ps.setInt(5, Integer.parseInt(Book_level_fieldtext.getText()));
                ps.setInt(6, Integer.parseInt(Book_id_fieldtext.getText()));

                ps.execute();
                JOptionPane.showMessageDialog(null, "Updated successfully!! Click refresh to see changes");
                Book_id_fieldtext.setText("");
                Book_name_fieldtext.setText("");
                Book_level_fieldtext.setText("");
                Book_genre_fieldtext.setText("");
                Book_publisher_fieldtext.setText("");
                Book_author_fieldtext.setText("");
            }
            catch(Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_Book_updateActionPerformed

    private void Book_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Book_addActionPerformed
        // TODO add your handling code here:
        if ( Book_id_fieldtext.getText().isEmpty() || Book_name_fieldtext.getText().isEmpty() || Book_level_fieldtext.getText().isEmpty()|| Book_genre_fieldtext.getText().isEmpty() || Book_publisher_fieldtext.getText().isEmpty()|| Book_author_fieldtext.getText().isEmpty() ){
            JOptionPane.showMessageDialog(new JFrame(), "The fields cannot be left blank.", "Message" , JOptionPane.INFORMATION_MESSAGE);
        }else{
            try{
                String sql = "Insert into book" + "(id,name,genre,publisher,author,level,issued)" + "values(?,?,?,?,?,?,?)";
                PreparedStatement ps = dbconnect.librarycon.prepareStatement(sql);
                ps.setInt(1, Integer.parseInt(Book_id_fieldtext.getText()));
                ps.setString(2, Book_name_fieldtext.getText());
                ps.setString(3, Book_genre_fieldtext.getText());
                ps.setString(4, Book_publisher_fieldtext.getText());
                ps.setString(5, Book_author_fieldtext.getText());
                ps.setInt(6, Integer.parseInt(Book_level_fieldtext.getText()));
                ps.setString(7, "N");
                
                ps.execute();
                JOptionPane.showMessageDialog(null, "Book added successfully!! Click refresh to see changes");
                Book_id_fieldtext.setText("");
                Book_name_fieldtext.setText("");
                Book_level_fieldtext.setText("");
                Book_genre_fieldtext.setText("");
                Book_publisher_fieldtext.setText("");
                Book_author_fieldtext.setText("");
            }
            catch(Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_Book_addActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Booksform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Booksform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Booksform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Booksform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Booksform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Book_add;
    private javax.swing.JLabel Book_author_fieldname;
    private javax.swing.JTextField Book_author_fieldtext;
    private javax.swing.JLabel Book_genre_fieldname;
    private javax.swing.JTextField Book_genre_fieldtext;
    private javax.swing.JLabel Book_id_fieldname;
    private javax.swing.JTextField Book_id_fieldtext;
    private javax.swing.JPanel Book_jpanel_0;
    private javax.swing.JPanel Book_jpanel_1;
    private javax.swing.JPanel Book_jpanel_2;
    private javax.swing.JLabel Book_level_fieldname;
    private javax.swing.JTextField Book_level_fieldtext;
    private javax.swing.JLabel Book_name_fieldname;
    private javax.swing.JTextField Book_name_fieldtext;
    private javax.swing.JTable Book_outputtable;
    private javax.swing.JLabel Book_publisher_fieldname;
    private javax.swing.JTextField Book_publisher_fieldtext;
    private javax.swing.JButton Book_remove;
    private javax.swing.JButton Book_update;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton goback;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
